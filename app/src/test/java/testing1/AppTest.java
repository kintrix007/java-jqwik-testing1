/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package testing1;

import static org.assertj.core.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.*;
// import static org.mockito.Mockito.*;

import java.util.*;
import java.util.stream.*;

import org.assertj.core.groups.Tuple;
import org.junit.jupiter.api.*;
import org.junit.jupiter.params.*;
import org.junit.jupiter.params.provider.*;
import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.safari.SafariDriver;

import net.jqwik.api.*;
import net.jqwik.api.constraints.*;

import static org.mockito.Mockito.*;

class AppTest {
    @Property
    boolean propContainsAny(
        @ForAll @Size(max = 100) List<@IntRange(min = -200, max = 200) Integer> xs,
        @ForAll @Size(max = 100) List<@IntRange(min = -200, max = 200) Integer> ys
    ) {
        var testContains = App.containsAny(xs, ys);
        //
        var trueContains = xs.stream()
            .anyMatch(x -> ys.stream().anyMatch(y -> x.equals(y)));
        return testContains == trueContains;
    }

    @Property(tries = 100)
    boolean propLastIndexOfIfContainsThenFound(
        @ForAll @IntRange(min = 0, max = 100) int val,
        @ForAll("intArrays0to100") @Size(min = 20) int[] arr
    ) {
        Assume.that(Arrays.stream(arr).anyMatch(x -> x == val));

        return App.lastIndexOf(arr, val, arr.length-1) != App.INDEX_NOT_FOUND;
    }

    @Property(tries = 10)
    boolean propNullArrayNotFound(@ForAll Integer x, @ForAll Integer y) {
        return App.lastIndexOf(null, x, y) == App.INDEX_NOT_FOUND;
    }

    @Property
    boolean propLastIndexOf(
            @ForAll @IntRange(min = 0, max = 100) int val,
            @ForAll("intArrays0to100") @Size(min = 0, max = 20) int[] arr,
            @ForAll @IntRange(min = -10, max = 100) int lastIndex
    ) {
        var testIndex = App.lastIndexOf(arr, val, lastIndex);
        var clamped = Math.max(0, Math.min(arr.length, lastIndex+1));
        var list = Arrays.stream(arr, 0, clamped).boxed().toList();
        var trueIndex = list.lastIndexOf(val);

        return testIndex == trueIndex;
    }

    @Provide
    Arbitrary<int[]> intArrays0to100() {
        return Arbitraries.integers().between(0, 100)
            .array(int[].class);
    }
    
    @Provide
    Arbitrary<Tuple> intProvider() {
        return Arbitraries.randomValue(x -> {
            Integer a = Math.abs(x.nextInt());
            Integer b = Math.abs(x.nextInt());
            Integer c = x.nextInt(Math.abs(b-a), a+b);
            return new Tuple(a, b, c);
        });
    }
    
    class MyAdder {
        int add(int a, int b) {
            return a + b;
        }
    }

    @Example
    void mockitoThing() {
        var foo = mock(MyAdder.class);
        foo.add(1, 2);
        when(69).thenReturn(42);
        assertEquals(42, foo.add(1, 2));
    }

    @Example
    void anotherExample() {
        var list = mock(ArrayList.class);
        when(list.size()).thenReturn(69);
        assertEquals(69, list.size());
        list.add("ur mom");
        assertEquals(69, list.size());
    }

    @Example
    void idk() {
        var browser = new SafariDriver();
        browser.get("https://goalsel.live");
        var header = browser.findElement(By.tagName("h1"));

        assertEquals("Goalsel", header.getText());

        browser.close();
    }
}

